/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.28).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.vodafone.es.marketplace.shippingorder.controller;

import com.github.fge.jsonpatch.JsonPatch;
import com.querydsl.core.types.Predicate;
import com.vodafone.es.marketplace.shippingorder.error.ApiException;
import com.vodafone.es.marketplace.shippingorder.error.BadRequestException;
import com.vodafone.es.marketplace.shippingorder.error.NotFoundException;
import com.vodafone.es.marketplace.shippingorder.model.Error;
import com.vodafone.es.marketplace.shippingorder.model.ShippingOrder;
import com.vodafone.es.marketplace.shippingorder.model.ShippingOrderCreate;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-09-14T05:35:44.317Z")

@Validated
@Api(value = "shippingOrder", description = "the shippingOrder API")
@RequestMapping(value = "/tmf-api/shippingOrder/v4.0/")
public interface ShippingOrderApi {

    @ApiOperation(value = "Creates a ShippingOrder", nickname = "createShippingOrder", notes = "This operation creates a ShippingOrder entity.", response = ShippingOrder.class, tags = {"shippingOrder",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Created", response = ShippingOrder.class),
            @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
            @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
            @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
            @ApiResponse(code = 409, message = "Conflict", response = Error.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class)})
    @PostMapping(path = "/shippingOrder",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"})
    ResponseEntity<ShippingOrder> createShippingOrder(@ApiParam(value = "The ShippingOrder to be created", required = true) @Valid @RequestBody ShippingOrderCreate shippingOrder) throws BadRequestException;


    @ApiOperation(value = "List or find ShippingOrder objects", nickname = "listShippingOrder", notes = "This operation list or find ShippingOrder entities", response = ShippingOrder.class, responseContainer = "List", tags = {"shippingOrder",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = ShippingOrder.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
            @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
            @ApiResponse(code = 404, message = "Not Found", response = Error.class),
            @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
            @ApiResponse(code = 409, message = "Conflict", response = Error.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class)})
    @GetMapping(path = "/shippingOrder",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"})
    ResponseEntity<List<ShippingOrder>> listShippingOrder(
            Predicate predicate,
            @ApiParam(value = "Comma-separated properties to be provided in response") @Valid @RequestParam(value = "fields", required = false) String fields,
            @ApiParam(value = "Requested index for start of resources to be provided in response") @Valid @RequestParam(value = "offset", required = false) Integer offset,
            @ApiParam(value = "Requested number of resources to be provided in response") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "Updates partially a ShippingOrder", nickname = "patchShippingOrder", notes = "This operation updates partially a ShippingOrder entity.", response = ShippingOrder.class, tags = {"shippingOrder",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Updated", response = ShippingOrder.class),
            @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
            @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
            @ApiResponse(code = 404, message = "Not Found", response = Error.class),
            @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
            @ApiResponse(code = 409, message = "Conflict", response = Error.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class)})
    @PatchMapping(path = "/shippingOrder/{id}",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json-patch+json;charset=utf-8"})
    ResponseEntity<ShippingOrder> patchShippingOrder(@ApiParam(value = "Identifier of the ShippingOrder", required = true) @PathVariable("id") String id, @ApiParam(value = "The ShippingOrder to be updated", required = true) @Valid @RequestBody JsonPatch jsonPatch) throws ApiException;


    @ApiOperation(value = "Retrieves a ShippingOrder by ID", nickname = "retrieveShippingOrder", notes = "This operation retrieves a ShippingOrder entity. Attribute selection is enabled for all first level attributes.", response = ShippingOrder.class, tags = {"shippingOrder",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Success", response = ShippingOrder.class),
            @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
            @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
            @ApiResponse(code = 404, message = "Not Found", response = Error.class),
            @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
            @ApiResponse(code = 409, message = "Conflict", response = Error.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class)})
    @GetMapping(path = "/shippingOrder/{id}",
            produces = {"application/json;charset=utf-8"},
            consumes = {"application/json;charset=utf-8"})
    ResponseEntity<ShippingOrder> retrieveShippingOrder(@ApiParam(value = "Identifier of the ShippingOrder", required = true) @PathVariable("id") String id, @ApiParam(value = "Comma-separated properties to provide in response") @Valid @RequestParam(value = "fields", required = false) String fields) throws NotFoundException;

}
